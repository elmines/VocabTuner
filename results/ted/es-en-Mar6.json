{
    "x": [
        51832,
        29659
    ],
    "fun": 94.3877,
    "func_vals": [
        94.5022,
        94.7595,
        96.0308,
        95.4362,
        95.1312,
        94.6524,
        94.6852,
        94.5793,
        95.7903,
        95.22409999999999,
        95.411,
        96.4067,
        94.3877,
        95.0327,
        94.4918,
        94.618,
        95.4454,
        97.1686,
        95.0178,
        95.1961
    ],
    "x_iters": [
        [
            51686,
            38067
        ],
        [
            6641,
            40781
        ],
        [
            12237,
            16188
        ],
        [
            20106,
            27339
        ],
        [
            48491,
            34546
        ],
        [
            16238,
            21412
        ],
        [
            22985,
            9371
        ],
        [
            27700,
            37308
        ],
        [
            23698,
            17581
        ],
        [
            48677,
            31774
        ],
        [
            27113,
            6329
        ],
        [
            0,
            38432
        ],
        [
            51832,
            29659
        ],
        [
            28297,
            27837
        ],
        [
            22481,
            3575
        ],
        [
            51832,
            25378
        ],
        [
            51832,
            36998
        ],
        [
            51829,
            319
        ],
        [
            51040,
            29022
        ],
        [
            22655,
            325
        ]
    ],
    "models": [
        "GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,\n             kernel=1**2 * Matern(length_scale=[1, 1], nu=2.5) + WhiteKernel(noise_level=1),\n             n_restarts_optimizer=2, noise='gaussian', normalize_y=True,\n             optimizer='fmin_l_bfgs_b', random_state=1791095845)",
        "GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,\n             kernel=1**2 * Matern(length_scale=[1, 1], nu=2.5) + WhiteKernel(noise_level=1),\n             n_restarts_optimizer=2, noise='gaussian', normalize_y=True,\n             optimizer='fmin_l_bfgs_b', random_state=1791095845)",
        "GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,\n             kernel=1**2 * Matern(length_scale=[1, 1], nu=2.5) + WhiteKernel(noise_level=1),\n             n_restarts_optimizer=2, noise='gaussian', normalize_y=True,\n             optimizer='fmin_l_bfgs_b', random_state=1791095845)",
        "GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,\n             kernel=1**2 * Matern(length_scale=[1, 1], nu=2.5) + WhiteKernel(noise_level=1),\n             n_restarts_optimizer=2, noise='gaussian', normalize_y=True,\n             optimizer='fmin_l_bfgs_b', random_state=1791095845)",
        "GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,\n             kernel=1**2 * Matern(length_scale=[1, 1], nu=2.5) + WhiteKernel(noise_level=1),\n             n_restarts_optimizer=2, noise='gaussian', normalize_y=True,\n             optimizer='fmin_l_bfgs_b', random_state=1791095845)",
        "GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,\n             kernel=1**2 * Matern(length_scale=[1, 1], nu=2.5) + WhiteKernel(noise_level=1),\n             n_restarts_optimizer=2, noise='gaussian', normalize_y=True,\n             optimizer='fmin_l_bfgs_b', random_state=1791095845)",
        "GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,\n             kernel=1**2 * Matern(length_scale=[1, 1], nu=2.5) + WhiteKernel(noise_level=1),\n             n_restarts_optimizer=2, noise='gaussian', normalize_y=True,\n             optimizer='fmin_l_bfgs_b', random_state=1791095845)",
        "GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,\n             kernel=1**2 * Matern(length_scale=[1, 1], nu=2.5) + WhiteKernel(noise_level=1),\n             n_restarts_optimizer=2, noise='gaussian', normalize_y=True,\n             optimizer='fmin_l_bfgs_b', random_state=1791095845)",
        "GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,\n             kernel=1**2 * Matern(length_scale=[1, 1], nu=2.5) + WhiteKernel(noise_level=1),\n             n_restarts_optimizer=2, noise='gaussian', normalize_y=True,\n             optimizer='fmin_l_bfgs_b', random_state=1791095845)",
        "GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,\n             kernel=1**2 * Matern(length_scale=[1, 1], nu=2.5) + WhiteKernel(noise_level=1),\n             n_restarts_optimizer=2, noise='gaussian', normalize_y=True,\n             optimizer='fmin_l_bfgs_b', random_state=1791095845)",
        "GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,\n             kernel=1**2 * Matern(length_scale=[1, 1], nu=2.5) + WhiteKernel(noise_level=1),\n             n_restarts_optimizer=2, noise='gaussian', normalize_y=True,\n             optimizer='fmin_l_bfgs_b', random_state=1791095845)"
    ],
    "space": "Space([Integer(low=0, high=51832),\n       Integer(low=0, high=40820)])",
    "random_state": "<mtrand.RandomState object at 0x2aea8a43c510>",
    "specs": {
        "args": {
            "n_jobs": 1,
            "kappa": 1.96,
            "xi": 0.01,
            "n_restarts_optimizer": 5,
            "n_points": 10000,
            "callback": null,
            "verbose": true,
            "random_state": "<mtrand.RandomState object at 0x2aea8a43c510>",
            "y0": null,
            "x0": null,
            "acq_optimizer": "auto",
            "acq_func": "gp_hedge",
            "n_random_starts": 10,
            "n_calls": 20,
            "base_estimator": "GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,\n             kernel=1**2 * Matern(length_scale=[1, 1], nu=2.5),\n             n_restarts_optimizer=2, noise='gaussian', normalize_y=True,\n             optimizer='fmin_l_bfgs_b', random_state=1791095845)",
            "dimensions": "Space([Integer(low=0, high=51832),\n       Integer(low=0, high=40820)])",
            "func": "<bound method Experiment.__vocab_rating of <__main__.Experiment object at 0x2aea8a434710>>"
        },
        "function": "base_minimize"
    }
}