{
    "x": [
        64380,
        78524
    ],
    "fun": 97.7385,
    "func_vals": [
        97.914,
        97.8531,
        98.4218,
        97.90090000000001,
        97.7451,
        98.323,
        98.4166,
        97.7898,
        98.4203,
        98.037,
        97.7385,
        99.9997,
        98.2746,
        98.253,
        98.5163,
        97.9343,
        98.0454,
        98.3889,
        98.0413,
        99.7688
    ],
    "x_iters": [
        [
            65482,
            73228
        ],
        [
            8414,
            78449
        ],
        [
            15503,
            31141
        ],
        [
            25473,
            52591
        ],
        [
            61434,
            66456
        ],
        [
            20572,
            41190
        ],
        [
            29120,
            18027
        ],
        [
            35093,
            71768
        ],
        [
            30023,
            33820
        ],
        [
            61670,
            61122
        ],
        [
            64380,
            78524
        ],
        [
            0,
            78524
        ],
        [
            36844,
            76653
        ],
        [
            56452,
            75168
        ],
        [
            47879,
            1274
        ],
        [
            10717,
            14570
        ],
        [
            33708,
            15423
        ],
        [
            63515,
            5081
        ],
        [
            63191,
            78524
        ],
        [
            8133,
            0
        ]
    ],
    "models": [
        "GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,\n             kernel=1**2 * Matern(length_scale=[1, 1], nu=2.5) + WhiteKernel(noise_level=1),\n             n_restarts_optimizer=2, noise='gaussian', normalize_y=True,\n             optimizer='fmin_l_bfgs_b', random_state=1791095845)",
        "GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,\n             kernel=1**2 * Matern(length_scale=[1, 1], nu=2.5) + WhiteKernel(noise_level=1),\n             n_restarts_optimizer=2, noise='gaussian', normalize_y=True,\n             optimizer='fmin_l_bfgs_b', random_state=1791095845)",
        "GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,\n             kernel=1**2 * Matern(length_scale=[1, 1], nu=2.5) + WhiteKernel(noise_level=1),\n             n_restarts_optimizer=2, noise='gaussian', normalize_y=True,\n             optimizer='fmin_l_bfgs_b', random_state=1791095845)",
        "GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,\n             kernel=1**2 * Matern(length_scale=[1, 1], nu=2.5) + WhiteKernel(noise_level=1),\n             n_restarts_optimizer=2, noise='gaussian', normalize_y=True,\n             optimizer='fmin_l_bfgs_b', random_state=1791095845)",
        "GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,\n             kernel=1**2 * Matern(length_scale=[1, 1], nu=2.5) + WhiteKernel(noise_level=1),\n             n_restarts_optimizer=2, noise='gaussian', normalize_y=True,\n             optimizer='fmin_l_bfgs_b', random_state=1791095845)",
        "GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,\n             kernel=1**2 * Matern(length_scale=[1, 1], nu=2.5) + WhiteKernel(noise_level=1),\n             n_restarts_optimizer=2, noise='gaussian', normalize_y=True,\n             optimizer='fmin_l_bfgs_b', random_state=1791095845)",
        "GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,\n             kernel=1**2 * Matern(length_scale=[1, 1], nu=2.5) + WhiteKernel(noise_level=1),\n             n_restarts_optimizer=2, noise='gaussian', normalize_y=True,\n             optimizer='fmin_l_bfgs_b', random_state=1791095845)",
        "GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,\n             kernel=1**2 * Matern(length_scale=[1, 1], nu=2.5) + WhiteKernel(noise_level=1),\n             n_restarts_optimizer=2, noise='gaussian', normalize_y=True,\n             optimizer='fmin_l_bfgs_b', random_state=1791095845)",
        "GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,\n             kernel=1**2 * Matern(length_scale=[1, 1], nu=2.5) + WhiteKernel(noise_level=1),\n             n_restarts_optimizer=2, noise='gaussian', normalize_y=True,\n             optimizer='fmin_l_bfgs_b', random_state=1791095845)",
        "GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,\n             kernel=1**2 * Matern(length_scale=[1, 1], nu=2.5) + WhiteKernel(noise_level=1),\n             n_restarts_optimizer=2, noise='gaussian', normalize_y=True,\n             optimizer='fmin_l_bfgs_b', random_state=1791095845)",
        "GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,\n             kernel=1**2 * Matern(length_scale=[1, 1], nu=2.5) + WhiteKernel(noise_level=1),\n             n_restarts_optimizer=2, noise='gaussian', normalize_y=True,\n             optimizer='fmin_l_bfgs_b', random_state=1791095845)"
    ],
    "space": "Space([Integer(low=0, high=65667),\n       Integer(low=0, high=78524)])",
    "random_state": "<mtrand.RandomState object at 0x2b0cd67c64c8>",
    "specs": {
        "args": {
            "n_jobs": 1,
            "kappa": 1.96,
            "xi": 0.01,
            "n_restarts_optimizer": 5,
            "n_points": 10000,
            "callback": null,
            "verbose": true,
            "random_state": "<mtrand.RandomState object at 0x2b0cd67c64c8>",
            "y0": null,
            "x0": null,
            "acq_optimizer": "auto",
            "acq_func": "gp_hedge",
            "n_random_starts": 10,
            "n_calls": 20,
            "base_estimator": "GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,\n             kernel=1**2 * Matern(length_scale=[1, 1], nu=2.5),\n             n_restarts_optimizer=2, noise='gaussian', normalize_y=True,\n             optimizer='fmin_l_bfgs_b', random_state=1791095845)",
            "dimensions": "Space([Integer(low=0, high=65667),\n       Integer(low=0, high=78524)])",
            "func": "<bound method Experiment.__vocab_rating of <__main__.Experiment object at 0x2b0cd67be7b8>>"
        },
        "function": "base_minimize"
    }
}