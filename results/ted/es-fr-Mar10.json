{
    "x": [
        48168,
        40323
    ],
    "fun": 95.7285,
    "func_vals": [
        96.0804,
        96.551,
        96.7032,
        96.6943,
        95.7285,
        95.8569,
        97.6563,
        96.5101,
        96.408,
        96.6317,
        95.7504,
        96.0365,
        95.9716,
        97.1353,
        96.07,
        96.5497,
        96.0297,
        97.3873,
        96.416,
        95.864
    ],
    "x_iters": [
        [
            51342,
            44433
        ],
        [
            6597,
            47600
        ],
        [
            12156,
            18895
        ],
        [
            19972,
            31911
        ],
        [
            48168,
            40323
        ],
        [
            16130,
            24993
        ],
        [
            22832,
            10938
        ],
        [
            27515,
            43547
        ],
        [
            23540,
            20521
        ],
        [
            48353,
            37087
        ],
        [
            51091,
            40415
        ],
        [
            46589,
            23484
        ],
        [
            42475,
            38832
        ],
        [
            51487,
            699
        ],
        [
            46150,
            26799
        ],
        [
            44469,
            40322
        ],
        [
            3863,
            25444
        ],
        [
            51372,
            25217
        ],
        [
            49797,
            40183
        ],
        [
            9397,
            25029
        ]
    ],
    "models": [
        "GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,\n             kernel=1**2 * Matern(length_scale=[1, 1], nu=2.5) + WhiteKernel(noise_level=1),\n             n_restarts_optimizer=2, noise='gaussian', normalize_y=True,\n             optimizer='fmin_l_bfgs_b', random_state=1791095845)",
        "GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,\n             kernel=1**2 * Matern(length_scale=[1, 1], nu=2.5) + WhiteKernel(noise_level=1),\n             n_restarts_optimizer=2, noise='gaussian', normalize_y=True,\n             optimizer='fmin_l_bfgs_b', random_state=1791095845)",
        "GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,\n             kernel=1**2 * Matern(length_scale=[1, 1], nu=2.5) + WhiteKernel(noise_level=1),\n             n_restarts_optimizer=2, noise='gaussian', normalize_y=True,\n             optimizer='fmin_l_bfgs_b', random_state=1791095845)",
        "GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,\n             kernel=1**2 * Matern(length_scale=[1, 1], nu=2.5) + WhiteKernel(noise_level=1),\n             n_restarts_optimizer=2, noise='gaussian', normalize_y=True,\n             optimizer='fmin_l_bfgs_b', random_state=1791095845)",
        "GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,\n             kernel=1**2 * Matern(length_scale=[1, 1], nu=2.5) + WhiteKernel(noise_level=1),\n             n_restarts_optimizer=2, noise='gaussian', normalize_y=True,\n             optimizer='fmin_l_bfgs_b', random_state=1791095845)",
        "GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,\n             kernel=1**2 * Matern(length_scale=[1, 1], nu=2.5) + WhiteKernel(noise_level=1),\n             n_restarts_optimizer=2, noise='gaussian', normalize_y=True,\n             optimizer='fmin_l_bfgs_b', random_state=1791095845)",
        "GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,\n             kernel=1**2 * Matern(length_scale=[1, 1], nu=2.5) + WhiteKernel(noise_level=1),\n             n_restarts_optimizer=2, noise='gaussian', normalize_y=True,\n             optimizer='fmin_l_bfgs_b', random_state=1791095845)",
        "GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,\n             kernel=1**2 * Matern(length_scale=[1, 1], nu=2.5) + WhiteKernel(noise_level=1),\n             n_restarts_optimizer=2, noise='gaussian', normalize_y=True,\n             optimizer='fmin_l_bfgs_b', random_state=1791095845)",
        "GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,\n             kernel=1**2 * Matern(length_scale=[1, 1], nu=2.5) + WhiteKernel(noise_level=1),\n             n_restarts_optimizer=2, noise='gaussian', normalize_y=True,\n             optimizer='fmin_l_bfgs_b', random_state=1791095845)",
        "GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,\n             kernel=1**2 * Matern(length_scale=[1, 1], nu=2.5) + WhiteKernel(noise_level=1),\n             n_restarts_optimizer=2, noise='gaussian', normalize_y=True,\n             optimizer='fmin_l_bfgs_b', random_state=1791095845)",
        "GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,\n             kernel=1**2 * Matern(length_scale=[1, 1], nu=2.5) + WhiteKernel(noise_level=1),\n             n_restarts_optimizer=2, noise='gaussian', normalize_y=True,\n             optimizer='fmin_l_bfgs_b', random_state=1791095845)"
    ],
    "space": "Space([Integer(low=0, high=51487),\n       Integer(low=0, high=47646)])",
    "random_state": "<mtrand.RandomState object at 0x2b75ec91a4c8>",
    "specs": {
        "args": {
            "n_jobs": 1,
            "kappa": 1.96,
            "xi": 0.01,
            "n_restarts_optimizer": 5,
            "n_points": 10000,
            "callback": null,
            "verbose": true,
            "random_state": "<mtrand.RandomState object at 0x2b75ec91a4c8>",
            "y0": null,
            "x0": null,
            "acq_optimizer": "auto",
            "acq_func": "gp_hedge",
            "n_random_starts": 10,
            "n_calls": 20,
            "base_estimator": "GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,\n             kernel=1**2 * Matern(length_scale=[1, 1], nu=2.5),\n             n_restarts_optimizer=2, noise='gaussian', normalize_y=True,\n             optimizer='fmin_l_bfgs_b', random_state=1791095845)",
            "dimensions": "Space([Integer(low=0, high=51487),\n       Integer(low=0, high=47646)])",
            "func": "<bound method Experiment.__vocab_rating of <__main__.Experiment object at 0x2b75ec912710>>"
        },
        "function": "base_minimize"
    }
}